/**
 * This file is generated by 'types-as-schema'
 * It is not mean to be edited by hand
 */
// tslint:disable
/* eslint-disable */

import { GraphQLResolveInfo } from 'graphql'



export type DeepPromisifyReturnType<T> = {
  [P in keyof T]: T[P] extends Array<infer U>
    ? Array<DeepPromisifyReturnType<U>>
    : T[P] extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPromisifyReturnType<U>>
      : T[P] extends (...args: infer P) => infer R
        ? (...args: P) => R | Promise<R>
        : DeepPromisifyReturnType<T[P]>
}

export type DeepReturnType<T> = {
  [P in keyof T]: T[P] extends Array<infer U>
    ? Array<DeepReturnType<U>>
    : T[P] extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepReturnType<U>>
      : T[P] extends (...args: any[]) => infer R
        ? R extends Promise<infer U>
          ? U
          : R
        : DeepReturnType<T[P]>
}

export interface Root<TContext = any> {
  blogs(input: { pagination: Pagination<TContext> }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<BlogsResult<TContext>> | Promise<DeepPromisifyReturnType<BlogsResult<TContext>>>
  blog(input: { id: number }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<BlogResult<TContext>> | Promise<DeepPromisifyReturnType<BlogResult<TContext>>>
  createBlog(input: { content: string }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<CreateBlogResult<TContext>> | Promise<DeepPromisifyReturnType<CreateBlogResult<TContext>>>
}

export interface Blog<TContext = any> {
  id: number
  content(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  posts(input: { id: number }, context: TContext, info: GraphQLResolveInfo): Array<Post<TContext>> | Promise<Array<Post<TContext>>>
  meta: any
}

export interface Post<TContext = any> {
  id: number
  content: string
}

export interface Pagination<TContext = any> {
  take: number
  skip: number
}

export interface BlogsResult<TContext = any> {
  result: Array<Blog<TContext>>
  count: number
}

export interface BlogResult<TContext = any> {
  result?: Blog<TContext>
}

export interface CreateBlogResult<TContext = any> {
  result: Blog<TContext>
}

export interface ResolveResult<TContext = any> {
  blogs: DeepReturnType<BlogsResult<TContext>>
  blog: DeepReturnType<BlogResult<TContext>>
  createBlog: DeepReturnType<CreateBlogResult<TContext>>
}

/* eslint-enable */
// tslint:enable
